<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:task="http://www.springframework.org/schema/task"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
    http://www.springframework.org/schema/beans/spring-beans-4.1.xsd   
    http://www.springframework.org/schema/context   
    http://www.springframework.org/schema/context/spring-context-4.1.xsd  
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
    http://www.springframework.org/schema/task 
    http://www.springframework.org/schema/task/spring-task-4.1.xsd     
    http://www.springframework.org/schema/aop 
     http://www.springframework.org/schema/aop/spring-aop-4.1.xsd"
	default-lazy-init="false">

	<!-- 定时器开关 开始 -->
	<task:annotation-driven />
	<!-- 标注类型 的事务配置 如果使用注解事务。就放开 <tx:annotation-driven /> -->
	<tx:annotation-driven />
	<!-- 统一异常处理方式 -->
	<bean id="exceptionHandler" class="com.zhjh.exception.MyExceptionHandler" />

	<!-- 初始化数据 -->
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:jdbc.properties</value>
			</list>
		</property>
		<property name="ignoreUnresolvablePlaceholders" value="true" />
	</bean>

	<!--dbcp -->
	<!-- <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" 
		destroy-method="close"> <property name="url" value="${jdbc.url}" /> <property 
		name="username" value="${jdbc.username}" /> <property name="password" value="${jdbc.password}" 
		/> <property name="driverClassName" value="${jdbc.driverClass}" /> <property 
		name="maxIdle" value="${jdbc.idleConnectionTestPeriod}" /> <property name="testOnBorrow" 
		value="${jdbc.testConnectionOnCheckin}" /> </bean> -->


	<!-- c3p0 -->
	<bean id="dataSource" name="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="3" />
		<property name="minIdle" value="1" />
		<property name="maxActive" value="20" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat" />
	</bean>

	<bean id="pagePlugin" class="com.zhjh.plugin.PagePlugin">
		<property name="properties">
			<props>
				<prop key="dialect">mysql</prop>
				<prop key="pageSqlId">.*query.*</prop>
			</props>
		</property>
	</bean>
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动匹配Mapper映射文件 -->
		<property name="mapperLocations" value="classpath:mappings/*-mapper.xml" />
		<property name="typeAliasesPackage" value="com.zhjh.entity" />
		<property name="plugins">
			<array>
				<ref bean="pagePlugin" />
			</array>
		</property>
	</bean>
	<!-- 通过扫描的模式，扫描目录在com.lanyuan.mapper目录下，所有的mapper都继承SqlMapper接口的接口， 这样一个bean就可以了 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.zhjh.mapper" />
	</bean>
	<!-- 事务配置 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- <aop:config> <aop:pointcut expression="execution(public * com.lanyuan.controller.*(..))" 
		id="pointcut" /> <aop:advisor advice-ref="txAdvice" pointcut-ref="pointcut" 
		/> </aop:config> <tx:advice id="txAdvice" transaction-manager="transactionManager"> 
		<tx:attributes> <tx:method name="query*" propagation="REQUIRED" read-only="true" 
		/> <tx:method name="find*" propagation="REQUIRED" read-only="true" /> <tx:method 
		name="save*" propagation="REQUIRED" /> <tx:method name="delete*" propagation="REQUIRED" 
		/> <tx:method name="add*" propagation="REQUIRED" /> <tx:method name="modify*" 
		propagation="REQUIRED" /> <tx:method name="logicDelById" propagation="REQUIRED" 
		/> </tx:attributes> </tx:advice> -->
	<!-- <aop:aspectj-autoproxy proxy-target-class="true"/> <bean id="log4jHandlerAOP" 
		class="com.lanyuan.logAop.LogAopAction"></bean> <aop:config proxy-target-class="true"> 
		<aop:aspect id="logAspect" ref="log4jHandlerAOP"> <aop:pointcut id="logPointCut" 
		expression="execution(* org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(..))" 
		/> <aop:around method="logAll" pointcut-ref="logPointCut" /> </aop:aspect> 
		</aop:config> -->
	<!-- 使用Spring组件扫描的方式来实现自动注入bean -->
	<context:component-scan base-package="com.zhjh" />
	<!--Aop切面编程的配置-->
	<aop:aspectj-autoproxy expose-proxy="true"></aop:aspectj-autoproxy>
	<bean id="logAopAction" class="com.zhjh.logAop.LogAopAction"></bean>
	<aop:config>
		<aop:pointcut id="loggerCutpoint"
					  expression=
							  "execution( * com.zhjh.controller..*.*(..)) "/>

		<aop:aspect id="logAspect" ref="logAopAction">
			<aop:around pointcut-ref="loggerCutpoint" method="around"/>
		</aop:aspect>
	</aop:config>
	<!-- 隐式地向 Spring 容器注册 -->
	<!-- <context:annotation-config /> -->
</beans>
